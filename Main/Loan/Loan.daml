
module Main.Loan.Loan where

import Main.Loan.LoanLimit
import Main.Loan.LoanRepayment

-- The Loan template which represents the approved loan agreement
template Loan
  with
    borrower : Party
    bank : Party
    amount : Decimal
    disbursedAmount : Decimal -- Track the total amount disbursed
    totalRepaid : Decimal -- Track the total amount repaid
    loanRepaymentCid : ContractId LoanRepayment
    auditor : Party
    memo : Text
    
  where
    signatory borrower, bank
    observer auditor

    -- Ensure the total loan amount is positive & disbursed amount does not exceed the approved loan amount
    ensure amount > 0.0 && disbursedAmount <= amount

    -- Choice to disburse tokens to the borrower
    choice Disburse : Loan
      with
        disburser : Party
        disburseAmount : Decimal
      controller disburser
      do
        debug "Disbursing tokens"
        -- Ensure that the disbursement does not exceed the approved loan amount
        assertMsg "Disbursement amount exceeds the approved loan" (disbursedAmount + disburseAmount <= amount)

        debug "Tokens disbursed"
        -- Return the updated loan contract with the new disbursed amount
        return this with disbursedAmount = disbursedAmount + disburseAmount

    -- Choice to repay the loan amount incrementally
    choice Repay : Loan
      with
        repaymentAmount : Decimal
      controller borrower
      do
        -- Fetch the repayment restriction to verify the minimum repayment amount
        restriction <- fetch loanRepaymentCid
        assertMsg "Repayment amount is below the minimum required" (repaymentAmount >= restriction.minRepaymentAmount)
        let newTotalRepaid = totalRepaid + repaymentAmount
        assertMsg "Repayment exceeds the loan amount" (newTotalRepaid <= amount)
        
        -- Archive the loan if the full amount is repaid
        if newTotalRepaid == amount
          then do
            -- Archive the loan contract
            debug "Loan fully repaid, archiving loan contract"
            archive self
            -- Update the LoanLimit (this would be implemented in LoanLimit contract)
            return this
          else return this with totalRepaid = newTotalRepaid
