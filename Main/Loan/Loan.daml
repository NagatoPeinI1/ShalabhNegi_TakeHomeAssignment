module Main.Loan.Loan where

import Main.Loan.LoanRepayment

-- Define the LoanStatus enum
data LoanStatus = Approved | Disbursed | Repaid
  deriving (Eq, Show)

-- The Loan template which represents the approved loan agreement
template Loan
  with
    borrower : Party
    bank : Party
    amount : Decimal
    status : LoanStatus
    disbursedAmount : Decimal -- Track the total amount disbursed
    totalRepaid : Decimal -- Track the total amount repaid
    loanRepaymentCid : ContractId LoanRepayment
    auditor : Party
    memo : Text
    
  where
    signatory borrower, bank
    observer auditor

    -- Ensure the total loan amount is positive & disbursed amount does not exceed the approved loan amount
    ensure amount > 0.00 && disbursedAmount <= amount

    choice Disburse : ContractId Loan
      controller bank
      do
        debug "Disbursing tokens"
        -- Return the updated loan contract with the new disbursed amount
        create this with disbursedAmount = amount, status = Disbursed


    -- Choice to repay the loan amount incrementally
    choice Repay : ContractId Loan
      with
        repaymentAmount : Decimal
      controller borrower
      do
        -- Fetch the repayment restriction to verify the minimum repayment amount
        restriction <- fetch loanRepaymentCid
        assertMsg "Repayment amount is below the minimum required" (repaymentAmount >= restriction.minRepaymentAmount)

        let newTotalRepaid = totalRepaid + repaymentAmount

        assertMsg "Repayment exceeds the loan amount" (newTotalRepaid <= amount)

        -- Archive the loan if the full amount is repaid and update the status to Repaid
        if newTotalRepaid == amount
          then do
            create this with totalRepaid = newTotalRepaid,
                                      status = Repaid
          else 
              do
                create this with totalRepaid = newTotalRepaid
